declare function ActivateTimecycleEditor() : void;
declare function CommitRuntimeTexture(tex : number) : void;
declare function ClearDrawOrigin() : void;
declare function CreateDryVolume(xMin : number , yMin : number , zMin : number , xMax : number , yMax : number , zMax : number) : number;
declare function CreateAudioSubmix(name : string) : number;
declare function AddTextEntry(entryKey : string , entryText : string) : void;
declare function AddAuthorizedParachuteModel(modelNameHash : number) : void;
declare function BreakOffVehicleWheel(vehicle : number , wheelIndex : number , leaveDebrisTrail : boolean , deleteWheel : boolean , unknownFlag : boolean , putOnFire : boolean) : void;
declare function CreateRuntimeTexture(txd : number , txn : string , width : number , height : number) : number;
declare function AddTextEntryByHash(entryKey : number , entryText : string) : void;
declare function CreateTimecycleModifier(modifierName : string) : number;
declare function AddAudioSubmixOutput(submixId : number , outputSubmixId : number) : void;
declare function CreateRuntimeTextureFromDuiHandle(txd : number , txn : string , duiHandle : string) : number;
declare function AddReplaceTexture(origTxd : string , origTxn : string , newTxd : string , newTxn : string) : void;
declare function CallMinimapScaleformFunction(miniMap : number , fnName : string) : boolean;
declare function CreateRuntimeTextureFromImage(txd : number , txn : string , fileName : string) : number;
declare function CloneTimecycleModifier(sourceModifierName : string , clonedModifierName : string) : number;
declare function CreateRuntimeTxd(name : string) : number;
declare function AddHealthConfig(configName : string , defaultHealth : number , defaultArmor : number , defaultEndurance : number , fatiguedHealthThreshold : number , injuredHealthThreshold : number , dyingHealthThreshold : number , hurtHealthThreshold : number , dogTakedownThreshold : number , writheFromBulletThreshold : number , meleeCardinalFatalAttack : boolean , invincible : boolean) : void;
declare function AddAuthorizedParachutePackModel(modelNameHash : number) : void;
declare function AddMinimapOverlay(name : string) : number;
declare function ClearVehicleXenonLightsCustomColor(vehicle : number) : void;
declare function ApplyWeatherCycles(numEntries : number , msPerCycle : number) : boolean;
declare function CreateDui(url : string , width : number , height : number) : number;
declare function AddMinimapOverlayWithDepth(name : string , depth : number) : number;
declare function EndFindPickup(findHandle : number) : void;
declare function EndFindVehicle(findHandle : number) : void;
declare function EndFindObject(findHandle : number) : void;
declare function DisableIdleCamera(state : boolean) : void;
declare function DrawRectRotated(x : number , y : number , width : number , height : number , rotation : number , r : number , g : number , b : number , a : number) : void;
declare function DrawLine2d(x1 : number , y1 : number , x2 : number , y2 : number , width : number , r : number , g : number , b : number , a : number) : void;
declare function EndFindPed(findHandle : number) : void;
declare function DoorSystemGetSize() : number;
declare function DoesTextureExist(textureId : number) : boolean;
declare function DrawBox(x1 : number , y1 : number , z1 : number , x2 : number , y2 : number , z2 : number , red : number , green : number , blue : number , alpha : number) : void;
declare function DestroyDui(duiObject : number) : void;
declare function DisableVehiclePassengerIdleCamera(state : boolean) : void;
declare function DrawPoly(x1 : number , y1 : number , z1 : number , x2 : number , y2 : number , z2 : number , x3 : number , y3 : number , z3 : number , red : number , green : number , blue : number , alpha : number) : void;
declare function DoorSystemGetActive() : object;
declare function DrawLine(x1 : number , y1 : number , z1 : number , x2 : number , y2 : number , z2 : number , red : number , green : number , blue : number , alpha : number) : void;
declare function DoesVehicleUseFuel(vehicle : number) : boolean;
declare function DrawCorona(posX : number , posY : number , posZ : number , size : number , red : number , green : number , blue : number , alpha : number , intensity : number , zBias : number , dirX : number , dirY : number , dirZ : number , viewThreshold : number , innerAngle : number , outerAngle : number , flags : number) : void;
declare function GetAspectRatio() : number;
declare function GetCalmingQuadBounds(waterQuad : number , minX : number , minY : number , maxX : number , maxY : number) : boolean;
declare function GetCalmingQuadDampening(waterQuad : number , calmingQuadDampening : number) : boolean;
declare function GetAllVehicleModels() : object;
declare function GetCamMatrix(camera : number , rightVector : number , forwardVector : number , upVector : number , position : number) : void;
declare function FindNextPed(findHandle : number , outEntity : number) : boolean;
declare function ExperimentalLoadCloneSync(entity : number , data : string) : void;
declare function DrawGlowSphere(posX : number , posY : number , posZ : number , radius : number , colorR : number , colorG : number , colorB : number , intensity : number , invert : boolean , marker : boolean) : void;
declare function ExperimentalLoadCloneCreate(data : string , objectId : number , tree : string) : number;
declare function FindNextPickup(findHandle : number , outEntity : number) : boolean;
declare function ExperimentalSaveCloneSync(entity : number) : string;
declare function DisableRawKeyThisFrame(rawKeyIndex : number) : boolean;
declare function DoesTimecycleModifierHasVar(modifierName : string , varName : string) : boolean;
declare function GetCalmingQuadCount() : number;
declare function DisableWorldhorizonRendering(state : boolean) : void;
declare function GetAllRopes() : object;
declare function GetCalmingQuadAtCoords(x : number , y : number) : number;
declare function GetAmbientPedRangeMultiplier() : number;
declare function FindFirstVehicle(outEntity : number) : number;
declare function ForceSnowPass(enabled : boolean) : void;
declare function FindNextObject(findHandle : number , outEntity : number) : boolean;
declare function FindFirstPed(outEntity : number) : number;
declare function GetActivePlayers() : object;
declare function FindFirstPickup(outEntity : number) : number;
declare function GetCurrentServerEndpoint() : string;
declare function GetClosestTrackNodes(position : number[] , radius : number) : object;
declare function GetAmbientVehicleRangeMultiplier() : number;
declare function GetAllTrackJunctions() : object;
declare function FindNextVehicle(findHandle : number , outEntity : number) : boolean;
declare function ExperimentalSaveCloneCreate(entity : number) : string;
declare function FindFirstObject(outEntity : number) : number;
declare function GetHudComponentSize(id : number) : number[];
declare function GetDuiHandle(duiObject : number) : string;
declare function GetEntityAddress(entity : number) : any;
declare function GetEntityArchetypeName(entity : number) : string;
declare function GetCurrentScreenResolution(width : number , height : number) : void;
declare function GetInteriorPortalCount(interiorId : number) : number;
declare function GetInteriorEntitiesExtents(interiorId : number , bbMinX : number , bbMinY : number , bbMinZ : number , bbMaxX : number , bbMaxY : number , bbMaxZ : number) : void;
declare function GetHudComponentAlign(id : number , horizontalAlign : number , verticalAlign : number) : void;
declare function GetCurrentGameName() : string;
declare function GetFuelConsumptionRateMultiplier() : number;
declare function GetInteriorPortalEntityCount(interiorId : number , portalIndex : number) : number;
declare function GetFuelConsumptionState() : boolean;
declare function GetGlobalPassengerMassMultiplier() : number;
declare function GetHudComponentName(id : number) : string;
declare function GetNumberOfPedCollectionPropDrawableVariations(ped : number , anchorPoint : number , collection : string) : number;
declare function GetInteriorPortalEntityFlag(interiorId : number , portalIndex : number , entityIndex : number) : number;
declare function GetNumberOfPedCollectionPropTextureVariations(ped : number , anchorPoint : number , collection : string , propIndex : number) : number;
declare function GetMinimapType() : number;
declare function GetNumberOfPedCollectionDrawableVariations(ped : number , componentId : number , collection : string) : number;
declare function GetMapZoomDataLevel(index : number , zoomScale : number , zoomSpeed : number , scrollSpeed : number , tilesX : number , tilesY : number) : boolean;
declare function GetNetworkWalkMode() : boolean;
declare function GetInteriorPortalFlag(interiorId : number , portalIndex : number) : number;
declare function GetInteriorRoomCount(interiorId : number) : number;
declare function GetInteriorPortalCornerPosition(interiorId : number , portalIndex : number , cornerIndex : number , posX : number , posY : number , posZ : number) : void;
declare function GetInteriorPortalEntityArchetype(interiorId : number , portalIndex : number , entityIndex : number) : number;
declare function GetInteriorRoomFlag(interiorId : number , roomIndex : number) : number;
declare function GetInteriorRoomTimecycle(interiorId : number , roomIndex : number) : number;
declare function GetInteriorPortalEntityPosition(interiorId : number , portalIndex : number , entityIndex : number , posX : number , posY : number , posZ : number) : void;
declare function GetPedModelPersonality(modelHash : number) : number;
declare function GetInteriorRoomExtents(interiorId : number , roomIndex : number , bbMinX : number , bbMinY : number , bbMinZ : number , bbMaxX : number , bbMaxY : number , bbMaxZ : number) : void;
declare function GetInteriorRoomIndexByHash(interiorId : number , roomHash : number) : number;
declare function GetInteriorPortalRoomTo(interiorId : number , portalIndex : number) : number;
declare function GetInteriorPosition(interiorId : number , posX : number , posY : number , posZ : number) : void;
declare function GetPedModelHealthConfig(modelHash : number) : number;
declare function GetPedHairHighlightColor(ped : number) : number;
declare function GetPedDrawableVariationCollectionLocalIndex(ped : number , componentId : number) : number;
declare function GetPedHeadOverlayData(ped : number , index : number , overlayValue : number , colourType : number , firstColour : number , secondColour : number , overlayOpacity : number) : boolean;
declare function GetPedMovementClipset(ped : number) : number;
declare function GetPedDrawableVariationCollectionName(ped : number , componentId : number) : string;
declare function GetInteriorPortalRoomFrom(interiorId : number , portalIndex : number) : number;
declare function GetNuiCursorPosition(x : number , y : number) : void;
declare function GetPedCollectionLocalIndexFromProp(ped : number , anchorPoint : number , propIndex : number) : number;
declare function GetPedDecorations(ped : number) : object;
declare function GetNumberOfPedCollectionTextureVariations(ped : number , componentId : number , collection : string , drawableId : number) : number;
declare function GetInteriorRoomName(interiorId : number , roomIndex : number) : string;
declare function GetPedCollectionNameFromProp(ped : number , anchorPoint : number , propIndex : number) : string;
declare function GetPedFaceFeature(ped : number , index : number) : number;
declare function GetInteriorRotation(interiorId : number , rotx : number , rotY : number , rotZ : number , rotW : number) : void;
declare function GetPedCollectionsCount(ped : number) : number;
declare function GetPedDensityMultiplier() : number;
declare function GetPedPropCollectionLocalIndex(ped : number , anchorPoint : number) : number;
declare function GetInteriorPortalEntityRotation(interiorId : number , portalIndex : number , entityIndex : number , rotX : number , rotY : number , rotZ : number , rotW : number) : void;
declare function GetPauseMapPointerWorldPosition() : number[];
declare function GetPedCollectionName(ped : number , index : number) : string;
declare function GetPedEyeColor(ped : number) : number;
declare function GetPedHairColor(ped : number) : number;
declare function GetPedBoneMatrix(ped : number , boneId : number , forwardVector : number , rightVector : number , upVector : number , position : number) : void;
declare function GetPlayerMeleeWeaponDefenseModifier(playerId : number) : number;
declare function GetPedCollectionLocalIndexFromDrawable(ped : number , componentId : number , drawableId : number) : number;
declare function GetPedCollectionNameFromDrawable(ped : number , componentId : number , drawableId : number) : string;
declare function GetPedPropGlobalIndexFromCollection(ped : number , anchorPoint : number , collection : string , propIndex : number) : number;
declare function GetPedDrawableGlobalIndexFromCollection(ped : number , componentId : number , collection : string , drawableId : number) : number;
declare function GetPedPropCollectionName(ped : number , anchorPoint : number) : string;
declare function GetPlayerFromServerId(serverId : number) : number;
declare function GetRopeLengthChangeRate(rope : number) : number;
declare function GetParkedVehicleDensityMultiplier() : number;
declare function GetRuntimeTextureHeight(tex : number) : number;
declare function GetPlayerVehicleDamageModifier(playerId : number) : number;
declare function GetRuntimeTextureWidth(tex : number) : number;
declare function GetPlayerInvincible2(player : number) : boolean;
declare function GetRopeFlags(rope : number) : number;
declare function GetPedSweat(ped : number) : number;
declare function GetPlayerMaxStamina(playerId : number) : number;
declare function GetRandomVehicleDensityMultiplier() : number;
declare function GetTrainSpeed(train : number) : number;
declare function GetPlayerServerId(player : number) : number;
declare function GetTimecycleVarNameByIndex(varIndex : number) : string;
declare function GetTimecycleModifierIndexByName(modifierName : string) : number;
declare function GetTrainDoorCount(train : number) : number;
declare function GetTimecycleModifierVarNameByIndex(modifierName : string , modifierVarIndex : number) : string;
declare function GetTimecycleModifierVar(modifierName : string , varName : string , value1 : number , value2 : number) : boolean;
declare function GetScenarioPedDensityMultiplier() : number;
declare function GetPlayerVehicleDefenseModifier(playerId : number) : number;
declare function GetRopeUpdateOrder(rope : number) : number;
declare function GetVehicleDashboardTemp() : number;
declare function GetVehicleClutch(vehicle : number) : number;
declare function GetVehicleDashboardRpm() : number;
declare function GetTrackBrakingDistance(track : number) : number;
declare function GetRopeTimeMultiplier(rope : number) : number;
declare function GetRuntimeTexturePitch(tex : number) : number;
declare function GetTrackMaxSpeed(track : number) : number;
declare function GetVehicleDashboardOilPressure() : number;
declare function GetShapeTestResultIncludingMaterial(shapeTestHandle : number , hit : boolean , endCoords : number , surfaceNormal : number , materialHash : number , entityHit : number) : number;
declare function GetVehicleCheatPowerIncrease(vehicle : number) : number;
declare function GetVehicleDashboardCurrentGear() : number;
declare function GetVehicleDensityMultiplier() : number;
declare function GetTimecycleModifierVarCount(modifierName : string) : number;
declare function GetVehicleDashboardBoost() : number;
declare function GetVehicleDashboardFuel() : number;
declare function GetVehicleDashboardLights() : number;
declare function GetTimecycleModifierNameByIndex(modifierIndex : number) : string;
declare function GetTimecycleVarCount() : number;
declare function GetTrackNodeCount(trackIndex : number) : number;
declare function GetVehicleDashboardVacuum() : number;
declare function GetTrainCurrentTrackNode(train : number) : number;
declare function GetTrackNodeCoords(trackIndex : number , trackNode : number , coords : number) : boolean;
declare function GetVehicleHandlingInt(vehicle : number , class_ : string , fieldName : string) : number;
declare function GetTimecycleVarDefaultValueByIndex(varIndex : number) : number;
declare function GetVehicleHandlingVector(vehicle : number , class_ : string , fieldName : string) : number[];
declare function GetTrainDoorOpenRatio(train : number , doorIndex : number) : number;
declare function GetPlayerStamina(playerId : number) : number;
declare function GetVehicleCurrentGear(vehicle : number) : number;
declare function GetVehicleAlarmTimeLeft(vehicle : number) : number;
declare function GetTimecycleModifierStrength() : number;
declare function GetVehicleHasFlag(vehicle : number , flagIndex : number) : boolean;
declare function GetVehicleCurrentRpm(vehicle : number) : number;
declare function GetVehicleGearRatio(vehicle : number , gear : number) : number;
declare function GetVehicleNumberOfWheels(vehicle : number) : number;
declare function GetVehicleDashboardOilTemp() : number;
declare function GetVehicleSteeringScale(vehicle : number) : number;
declare function GetVehicleGravityAmount(vehicle : number) : number;
declare function GetVehicleIndicatorLights(vehicle : number) : number;
declare function GetVehicleDashboardSpeed(vehicle : number) : number;
declare function GetTimecycleModifierCount() : number;
declare function GetVehicleFuelLevel(vehicle : number) : number;
declare function GetVehicleNextGear(vehicle : number) : number;
declare function GetVehicleDrawnWheelAngleMult(vehicle : number) : number;
declare function GetVehicleHandlingFloat(vehicle : number , class_ : string , fieldName : string) : number;
declare function GetVehicleHighGear(vehicle : number) : number;
declare function GetVehicleEngineTemperature(vehicle : number) : number;
declare function GetVehicleWheelHealth(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleWheelRotationSpeed(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleTurboPressure(vehicle : number) : number;
declare function GetWaterQuadIsInvisible(waterQuad : number , isInvisible : number) : boolean;
declare function GetVehicleWheelXOffset(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleWheelieState(vehicle : number) : number;
declare function GetVehicleWheelIsPowered(vehicle : number , wheelIndex : number) : boolean;
declare function GetWaterQuadAtCoords(x : number , y : number) : number;
declare function GetVehicleTopSpeedModifier(vehicle : number) : number;
declare function GetVehicleWheelRimColliderSize(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleThrottleOffset(vehicle : number) : number;
declare function GetVehicleWheelSurfaceMaterial(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleLightMultiplier(vehicle : number) : number;
declare function GetVehicleWheelTractionVectorLength(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleWheelPower(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleWheelFlags(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleWheelTireColliderWidth(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleWheelSpeed(vehicle : number , wheelIndex : number) : number;
declare function GetVehicleWheelTireColliderSize(vehicle : number , wheelIndex : number) : number;
declare function GetWaterQuadCount() : number;
declare function GetVehicleWheelWidth(vehicle : number) : number;
declare function GetVehicleWheelBrakePressure(vehicle : number , wheelIndex : number) : number;
declare function IsBigmapFull() : boolean;
declare function GetWeaponComponentReticuleHash(componentHash : number) : number;
declare function GetVisualSettingFloat(name : string) : number;
declare function GetVehicleTypeRaw(vehicle : number) : number;
declare function GetWaveQuadCount() : number;
declare function GetVehicleWheelYRotation(vehicle : number , wheelIndex : number) : number;
declare function GetWaveQuadDirection(waveQuad : number , directionX : number , directionY : number) : boolean;
declare function HasMinimapOverlayLoaded(id : number) : boolean;
declare function GetVehicleOilLevel(vehicle : number) : number;
declare function GetWaterQuadBounds(waterQuad : number , minX : number , minY : number , maxX : number , maxY : number) : boolean;
declare function GetWaterQuadAtCoords3d(x : number , y : number , z : number) : number;
declare function GetWaterQuadType(waterQuad : number , waterType : number) : boolean;
declare function GetWaveQuadBounds(waveQuad : number , minX : number , minY : number , maxX : number , maxY : number) : boolean;
declare function GetWaterQuadLevel(waterQuad : number , waterQuadLevel : number) : boolean;
declare function GetWeaponComponentRangeDamageModifier(componentHash : number) : number;
declare function GetWaterQuadHasLimitedDepth(waterQuad : number , hasLimitedDepth : number) : boolean;
declare function GetVehicleWheelSize(vehicle : number) : number;
declare function GetWeaponAccuracySpread(weaponHash : number) : number;
declare function GetWeaponComponentClipSize(componentHash : number) : number;
declare function GetWeaponComponentRangeModifier(componentHash : number) : number;
declare function GetVehicleWheelSuspensionCompression(vehicle : number , wheelIndex : number) : number;
declare function GetWeaponDamageModifier(weaponHash : number) : number;
declare function GetWaveQuadAmplitude(waveQuad : number , waveQuadAmplitude : number) : boolean;
declare function IsNuiFocusKeepingInput() : boolean;
declare function GetWeaponComponentCameraHash(componentHash : number) : number;
declare function GetWeaponComponentAccuracyModifier(componentHash : number) : number;
declare function IsNuiFocused() : boolean;
declare function GetWaveQuadAtCoords(x : number , y : number) : number;
declare function GetWaterQuadNoStencil(waterQuad : number , noStencil : number) : boolean;
declare function GetVehicleXmasSnowFactor() : number;
declare function GetWaterQuadAlpha(waterQuad : number , a0 : number , a1 : number , a2 : number , a3 : number) : boolean;
declare function GetVehicleXenonLightsCustomColor(vehicle : number , red : number , green : number , blue : number) : boolean;
declare function GetWorldCoordFromScreenCoord(screenX : number , screenY : number , worldVector : number , normalVector : number) : void;
declare function IsPedCollectionComponentVariationValid(ped : number , componentId : number , collection : string , drawableId : number , textureId : number) : boolean;
declare function IsDisabledRawKeyDown(rawKeyIndex : number) : boolean;
declare function GetWeaponComponentDamageModifier(componentHash : number) : number;
declare function IsDisabledRawKeyReleased(rawKeyIndex : number) : boolean;
declare function GetVehicleWheelSteeringAngle(vehicle : number , wheelIndex : number) : number;
declare function IsPedCollectionComponentVariationGen9Exclusive(ped : number , componentId : number , collection : string , drawableId : number) : boolean;
declare function IsDuiAvailable(duiObject : number) : boolean;
declare function IsDisabledRawKeyPressed(rawKeyIndex : number) : boolean;
declare function MumbleAddVoiceTargetPlayerByServerId(targetId : number , serverId : number) : void;
declare function MumbleAddVoiceTargetChannel(targetId : number , channel : number) : void;
declare function IsVehicleAlarmSet(vehicle : number) : boolean;
declare function GetWeaponRecoilShakeAmplitude(weaponHash : number) : number;
declare function IsDisabledRawKeyUp(rawKeyIndex : number) : boolean;
declare function IsTrackEnabled(track : number) : boolean;
declare function IsVehicleWanted(vehicle : number) : boolean;
declare function IsBigmapActive() : boolean;
declare function IsVehicleNeedsToBeHotwired(vehicle : number) : boolean;
declare function IsTrackSwitchedOff(track : number) : boolean;
declare function IsRawKeyUp(rawKeyIndex : number) : boolean;
declare function MumbleClearVoiceTarget(targetId : number) : void;
declare function GetWeaponAnimationOverride(ped : number) : number;
declare function MumbleIsPlayerTalking(player : number) : boolean;
declare function IsVehicleWheelBrokenOff(vehicle : number , wheelIndex : number) : boolean;
declare function IsStreamingFileReady(registerAs : string) : boolean;
declare function IsRawKeyPressed(rawKeyIndex : number) : boolean;
declare function MumbleRemoveVoiceTargetChannel(targetId : number , channel : number) : void;
declare function MumbleAddVoiceChannelListen(channel : number) : void;
declare function MumbleRemoveVoiceTargetPlayerByServerId(targetId : number , serverId : number) : void;
declare function IsVehicleInteriorLightOn(vehicle : number) : boolean;
declare function IsVehiclePreviouslyOwnedByPlayer(vehicle : number) : boolean;
declare function MumbleSetVolumeOverrideByServerId(serverId : number , volume : number) : void;
declare function MumbleSetActive(state : boolean) : void;
declare function IsRawKeyDown(rawKeyIndex : number) : boolean;
declare function MumbleIsActive() : boolean;
declare function MumbleSetAudioInputDistance(distance : number) : void;
declare function MumbleRemoveVoiceTargetPlayer(targetId : number , player : number) : void;
declare function MumbleSetVolumeOverride(player : number , volume : number) : void;
declare function MumbleSetServerAddress(address : string , port : number) : void;
declare function MumbleGetTalkerProximity() : number;
declare function MumbleSetVoiceChannel(channel : number) : void;
declare function IsRawKeyReleased(rawKeyIndex : number) : boolean;
declare function IsPedComponentVariationGen9Exclusive(ped : number , componentId : number , drawableId : number) : boolean;
declare function LoadWaterFromPath(resourceName : string , fileName : string) : boolean;
declare function MumbleSetTalkerProximity(value : number) : void;
declare function MumbleClearVoiceTargetChannels(targetId : number) : void;
declare function MumbleAddVoiceTargetPlayer(targetId : number , player : number) : void;
declare function MumbleRemoveVoiceChannelListen(channel : number) : void;
declare function MumbleGetVoiceChannelFromServerId(serverId : number) : number;
declare function MumbleIsConnected() : boolean;
declare function OverridePopGroups(path : string) : void;
declare function RegisterFontFile(fileName : string) : void;
declare function MumbleClearVoiceChannel() : void;
declare function MumbleSetAudioInputIntent(intentHash : number) : void;
declare function MumbleSetVoiceTarget(targetId : number) : void;
declare function RegisterKeyMapping(commandString : string , description : string , defaultMapper : string , defaultParameter : string) : void;
declare function NetworkDoesEntityExistWithNetworkId(netId : number) : boolean;
declare function RegisterRawKeymap(keymapName : string , onKeyDown : Function , onKeyUp : Function , rawKeyIndex : number , canBeDisabled : boolean) : void;
declare function RegisterStreamingFileFromUrl(registerAs : string , url : string) : void;
declare function MumbleDoesChannelExist(channel : number) : boolean;
declare function OverridePedsCanStandOnTopFlag(flag : boolean) : void;
declare function RegisterStreamingFileFromKvs(kvsKey : string) : void;
declare function OnesyncEnableRemoteAttachmentSanitization(enable : boolean) : void;
declare function MumbleSetAudioOutputDistance(distance : number) : void;
declare function RemapRawKeymap(keymapName : string , newRawKeyIndex : number) : void;
declare function MumbleSetSubmixForServerId(serverId : number , submixId : number) : void;
declare function OverrideVehiclePedsCanStandOnTopFlag(vehicle : number , can : boolean) : void;
declare function RegisterStreamingFileFromCache(resourceName : string , fileName : string , cacheString : string) : void;
declare function MumbleClearVoiceTargetPlayers(targetId : number) : void;
declare function SendNuiMessage(jsonString : string) : boolean;
declare function RegisterNuiCallbackType(callbackType : string) : void;
declare function RegisterNuiCallback(callbackType : string , callback : Function) : void;
declare function OverridePedsUseDefaultDriveByClipset(flag : boolean) : void;
declare function RegisterFontId(fontName : string) : number;
declare function SendLoadingScreenMessage(jsonString : string) : boolean;
declare function ResetVehiclePedsCanStandOnTopFlag(vehicle : number) : void;
declare function RemoveDryVolume(handle : number) : void;
declare function RegisterArchetypes(factory : Function) : void;
declare function RegisterRawNuiCallback(callbackType : string , callback : Function) : void;
declare function RegisterTrackJunction(trackIndex : number , trackNode : number , newIndex : number , newNode : number , direction : boolean) : number;
declare function SendDuiMessage(duiObject : number , jsonString : string) : void;
declare function RemoveHealthConfig(configName : string) : void;
declare function RemoveTimecycleModifierVar(modifierName : string , varName : string) : void;
declare function RemoveTimecycleModifier(modifierName : string) : void;
declare function RegisterRopeData(numSections : number , radius : number , diffuseTextureName : string , normalMapName : string , distanceMappingScale : number , uvScaleX : number , uvScaleY : number , specularFresnel : number , specularFalloff : number , specularIntensity : number , bumpiness : number , color : number) : number;
declare function RequestResourceFileSet(setName : string) : boolean;
declare function SetBackfaceculling(toggle : boolean) : void;
declare function ResetPedModelPersonality(modelHash : number) : void;
declare function SendDuiMouseMove(duiObject : number , x : number , y : number) : void;
declare function SetAudioSubmixEffectRadioFx(submixId : number , effectSlot : number) : void;
declare function SendDuiMouseDown(duiObject : number , button : string) : void;
declare function ResetFlyThroughWindscreenParams() : void;
declare function RemoveTrackJunction(junctionIndex : number) : boolean;
declare function OverrideReactionToVehicleSiren(state : boolean , reaction : number) : void;
declare function SetAimCooldown(value : number) : void;
declare function SetDiscordRichPresenceAssetSmall(assetName : string) : void;
declare function SetDiscordRichPresenceAssetText(text : string) : void;
declare function SetDuiUrl(duiObject : number , url : string) : void;
declare function SetCalmingQuadDampening(calmingQuad : number , dampening : number) : boolean;
declare function SetFuelConsumptionRateMultiplier(multiplier : number) : void;
declare function SetGlobalPassengerMassMultiplier(massMul : number) : void;
declare function ResetMapZoomDataLevel(index : number) : void;
declare function RemoveReplaceTexture(origTxd : string , origTxn : string) : void;
declare function SetAudioSubmixEffectParamInt(submixId : number , effectSlot : number , paramIndex : number , paramValue : number) : void;
declare function SendDuiMouseUp(duiObject : number , button : string) : void;
declare function SetDiscordAppId(appId : string) : void;
declare function ResetWater() : void;
declare function SetCursorLocation(x : number , y : number) : boolean;
declare function SetAudioSubmixOutputVolumes(submixId : number , outputSlot : number , frontLeftVolume : number , frontRightVolume : number , rearLeftVolume : number , rearRightVolume : number , channel5Volume : number , channel6Volume : number) : void;
declare function SendDuiMouseWheel(duiObject : number , deltaY : number , deltaX : number) : void;
declare function SetFogVolumeRenderDisabled(state : boolean) : void;
declare function RemoveTexture(textureId : number) : void;
declare function SetFlashLightKeepOnWhileMoving(state : boolean) : void;
declare function SetAudioSubmixEffectParamFloat(submixId : number , effectSlot : number , paramIndex : number , paramValue : number) : void;
declare function SetDiscordRichPresenceAction(index : number , label : string , url : string) : void;
declare function SetDefaultVehicleNumberPlateTextPattern(plateIndex : number , pattern : string) : void;
declare function SetKeyMappingHideResources(hide : boolean) : void;
declare function SetDiscordRichPresenceAsset(assetName : string) : void;
declare function SetHudComponentSize(id : number , x : number , y : number) : void;
declare function SetDrawOrigin(x : number , y : number , z : number , is2d : boolean) : void;
declare function SetCalmingQuadBounds(waterQuad : number , minX : number , minY : number , maxX : number , maxY : number) : boolean;
declare function SetFlyThroughWindscreenParams(vehMinSpeed : number , unkMinSpeed : number , unkModifier : number , minDamage : number) : boolean;
declare function SetInteriorPortalCornerPosition(interiorId : number , portalIndex : number , cornerIndex : number , posX : number , posY : number , posZ : number) : void;
declare function SetHandlingFloat(vehicle : string , class_ : string , fieldName : string , value : number) : void;
declare function SetFuelConsumptionState(state : boolean) : void;
declare function SetEmitterProbeLength(probeLength : number) : void;
declare function SetIgnoreVehicleOwnershipForStowing(ignore : boolean) : void;
declare function SetInteriorPortalRoomTo(interiorId : number , portalIndex : number , roomTo : number) : void;
declare function SetHandlingField(vehicle : string , class_ : string , fieldName : string , value : any) : void;
declare function SetHandlingInt(vehicle : string , class_ : string , fieldName : string , value : number) : void;
declare function SetHandlingVector(vehicle : string , class_ : string , fieldName : string , value : number[]) : void;
declare function SetHealthConfigDefaultHealth(configName : string , newValue : number) : void;
declare function SetDiscordRichPresenceAssetSmallText(text : string) : void;
declare function SetHealthConfigDefaultEndurance(configName : string , newValue : number) : void;
declare function SetHealthConfigFatiguedThreshold(configName : string , newValue : number) : void;
declare function SetHealthConfigMeleeFatalAttack(configName : string , newValue : boolean) : void;
declare function SetRichPresence(presenceState : string) : void;
declare function SetHealthConfigHurtThreshold(configName : string , newValue : number) : void;
declare function SetManualShutdownLoadingScreenNui(manualShutdown : boolean) : void;
declare function SetMapZoomDataLevel(index : number , zoomScale : number , zoomSpeed : number , scrollSpeed : number , tilesX : number , tilesY : number) : void;
declare function SetPedModelHealthConfig(modelHash : number , configName : string) : void;
declare function SetHealthConfigInjuredThreshold(configName : string , newValue : number) : void;
declare function SetPedCollectionPreloadPropData(ped : number , anchorPoint : number , collection : string , propIndex : number , textureId : number) : void;
declare function SetMinimapType(type : number) : void;
declare function SetInteriorProbeLength(probeLength : number) : void;
declare function SetMinimapOverlayDisplay(miniMap : number , x : number , y : number , xScale : number , yScale : number , alpha : number) : void;
declare function SetHealthConfigDyingThreshold(configName : string , newValue : number) : void;
declare function SetModelHeadlightConfiguration(modelHash : number , ratePerSecond : number , headlightRotation : number , invertRotation : boolean) : void;
declare function SetHealthConfigWritheFromBulletThreshold(configName : string , newValue : number) : void;
declare function SetInteriorPortalRoomFrom(interiorId : number , portalIndex : number , roomFrom : number) : void;
declare function SetInteriorRoomExtents(interiorId : number , roomIndex : number , bbMinX : number , bbMinY : number , bbMinZ : number , bbMaxX : number , bbMaxY : number , bbMaxZ : number) : void;
declare function SetHealthConfigDogTakedownThreshold(configName : string , newValue : number) : void;
declare function SetInteriorRoomTimecycle(interiorId : number , roomIndex : number , timecycleHash : number) : void;
declare function SetHealthConfigDefaultArmor(configName : string , newValue : number) : void;
declare function SetNetworkWalkMode(enabled : boolean) : void;
declare function SetInteriorPortalFlag(interiorId : number , portalIndex : number , flag : number) : void;
declare function SetInteriorPortalEntityFlag(interiorId : number , portalIndex : number , entityIndex : number , flag : number) : void;
declare function SetInteriorRoomFlag(interiorId : number , roomIndex : number , flag : number) : void;
declare function SetNuiFocusKeepInput(keepInput : boolean) : void;
declare function SetMpGamerTagsVisibleDistance(distance : number) : void;
declare function SetPedTurningThresholds(min : number , max : number) : void;
declare function SetRopesCreateNetworkWorldState(shouldCreate : boolean) : void;
declare function SetHudComponentAlign(id : number , horizontalAlign : number , verticalAlign : number) : void;
declare function SetPedModelPersonality(modelHash : number , personalityHash : number) : void;
declare function SetVehicleCurrentRpm(vehicle : number , rpm : number) : void;
declare function SetHealthConfigInvincible(configName : string , newValue : boolean) : void;
declare function SetPlayerStamina(playerId : number , stamina : number) : boolean;
declare function SetMinimapComponentPosition(name : string , alignX : string , alignY : string , posX : number , posY : number , sizeX : number , sizeY : number) : void;
declare function SetNuiZindex(zIndex : number) : void;
declare function SetMillisecondsPerGameMinute(value : number) : void;
declare function SetMinimapClipType(type : number) : void;
declare function SetPedCollectionPreloadVariationData(ped : number , componentId : number , collection : string , drawableId : number , textureId : number) : void;
declare function SetPlayerMaxStamina(playerId : number , maxStamina : number) : boolean;
declare function SetPedCollectionPropIndex(ped : number , anchorPoint : number , collection : string , propIndex : number , textureId : number , attach : boolean) : void;
declare function SetTextJustification(justifyType : number) : void;
declare function SetVehicleFlag(vehicle : number , flagIndex : number , value : boolean) : boolean;
declare function SetPedMeleeCombatLimits(primaryCount : number , secondaryCount : number , populationPedCount : number) : void;
declare function SetReactionToVehicleWithSirenDisabled(state : boolean) : void;
declare function SetRuntimeTextureImage(tex : number , fileName : string) : boolean;
declare function SetPlayerTalkingOverride(player : number , state : boolean) : void;
declare function SetVehicleClutch(vehicle : number , clutch : number) : void;
declare function SetRuntimeTexturePixel(tex : number , x : number , y : number , r : number , g : number , b : number , a : number) : void;
declare function SetRopeLengthChangeRate(rope : number , lengthChangeRate : number) : void;
declare function SetTextChatEnabled(enabled : boolean) : boolean;
declare function SetPedCollectionComponentVariation(ped : number , componentId : number , collection : string , drawableId : number , textureId : number , paletteId : number) : void;
declare function SetVehicleEngineTemperature(vehicle : number , temperature : number) : void;
declare function SetTextFontForCurrentCommand(fontId : number) : void;
declare function SetMpGamerTagsUseVehicleBehavior(enabled : boolean) : void;
declare function SetVehicleCurrentGear(vehicle : number , gear : number) : void;
declare function SetVehicleFuelLevel(vehicle : number , level : number) : void;
declare function SetNuiFocus(hasFocus : boolean , hasCursor : boolean) : void;
declare function SetVehicleGearRatio(vehicle : number , gear : number , ratio : number) : void;
declare function SetRuntimeTextureArgbData(tex : number , buffer : string , length : number) : boolean;
declare function SetTrainsForceDoorsOpen(forceOpen : boolean) : void;
declare function SetTextWrap(start : number , end : number) : void;
declare function SetTimecycleModifierVar(modifierName : string , varName : string , value1 : number , value2 : number) : void;
declare function SetSnakeoilForEntry(name : string , path : string , data : string) : void;
declare function SetVehicleWheelRotationSpeed(vehicle : number , wheelIndex : number , speed : number) : void;
declare function SetVehicleSuspensionHeight(vehicle : number , newHeight : number) : void;
declare function SetVehicleWheelBrakePressure(vehicle : number , wheelIndex : number , pressure : number) : void;
declare function SetVehicleAutoRepairDisabled(vehicle : number , value : boolean) : void;
declare function SetVehicleHandlingField(vehicle : number , class_ : string , fieldName : string , value : any) : void;
declare function SetTrainStopAtStations(train : number , state : boolean) : void;
declare function SetVehicleGravityAmount(vehicle : number , gravity : number) : void;
declare function SetVehicleHandlingFloat(vehicle : number , class_ : string , fieldName : string , value : number) : void;
declare function SetVehicleSteeringAngle(vehicle : number , angle : number) : void;
declare function SetVehicleWheelFlags(vehicle : number , wheelIndex : number , flags : number) : void;
declare function SetVehicleNextGear(vehicle : number , nextGear : number) : void;
declare function SetVehicleWheelYRotation(vehicle : number , wheelIndex : number , value : number) : void;
declare function SetTrackJunctionActive(junctionIndex : number , state : boolean) : boolean;
declare function SetTrackBrakingDistance(track : number , brakingDistance : number) : void;
declare function SetVehicleWheelTireColliderSize(vehicle : number , wheelIndex : number , value : number) : void;
declare function SetTrainDoorOpenRatio(train : number , doorIndex : number , ratio : number) : void;
declare function SetVehicleAlarmTimeLeft(vehicle : number , time : number) : void;
declare function SetVehicleRollBias(vehicle : number , value : number) : void;
declare function SetVehicleWheelSize(vehicle : number , size : number) : boolean;
declare function SetTrackEnabled(track : number , enabled : boolean) : void;
declare function SetTrainState(train : number , state : number) : void;
declare function SetVehicleHandlingInt(vehicle : number , class_ : string , fieldName : string , value : number) : void;
declare function SetVehicleTurboPressure(vehicle : number , pressure : number) : void;
declare function SetVehicleNitroPtfxRange(range : number) : void;
declare function SetVehicleXenonLightsCustomColor(vehicle : number , red : number , green : number , blue : number) : void;
declare function SetVehicleHandlingVector(vehicle : number , class_ : string , fieldName : string , value : number[]) : void;
declare function SetVehicleWheelXOffset(vehicle : number , wheelIndex : number , offset : number) : void;
declare function SetWeaponsNoAimBlocking(state : boolean) : void;
declare function SetVehicleHighGear(vehicle : number , gear : number) : void;
declare function SetVehicleWheelRimColliderSize(vehicle : number , wheelIndex : number , value : number) : void;
declare function SetVehicleXmasSnowFactor(gripFactor : number) : void;
declare function SetTrackMaxSpeed(track : number , newSpeed : number) : void;
declare function SetWeaponsNoAutoreload(state : boolean) : void;
declare function SetWaterQuadHasLimitedDepth(waterQuad : number , hasLimitedDepth : boolean) : boolean;
declare function SetWaterQuadType(waterQuad : number , type : number) : boolean;
declare function SetWeaponsNoAutoswap(state : boolean) : void;
declare function SetVehicleWheelPower(vehicle : number , wheelIndex : number , power : number) : void;
declare function SetVisualSettingFloat(name : string , value : number) : void;
declare function SetVehicleWheelTireColliderWidth(vehicle : number , wheelIndex : number , value : number) : void;
declare function SetVehicleWheelTractionVectorLength(vehicle : number , wheelIndex : number , length : number) : void;
declare function SetVehiclePitchBias(vehicle : number , value : number) : void;
declare function SetVehicleWheelWidth(vehicle : number , width : number) : boolean;
declare function SetWeaponAccuracySpread(weaponHash : number , spread : number) : void;
declare function TriggerServerEventInternal(eventName : string , eventPayload : string , payloadLength : number) : void;
declare function SetVehicleWheelIsPowered(vehicle : number , wheelIndex : number , powered : boolean) : void;
declare function SetVehicleWheelieState(vehicle : number , state : number) : void;
declare function SetVehicleSteeringScale(vehicle : number , scale : number) : void;
declare function SetWaveQuadBounds(waveQuad : number , minX : number , minY : number , maxX : number , maxY : number) : boolean;
declare function SetWeaponRecoilShakeAmplitude(weaponHash : number , amplitude : number) : void;
declare function SetWaterAreaClipRect(minX : number , minY : number , maxX : number , maxY : number) : void;
declare function SetVehicleOilLevel(vehicle : number , level : number) : void;
declare function SetWaveQuadAmplitude(waveQuad : number , amplitude : number) : boolean;
declare function TriggerLatentServerEventInternal(eventName : string , eventPayload : string , payloadLength : number , bps : number) : void;
declare function SetVehicleWheelHealth(vehicle : number , wheelIndex : number , health : number) : void;
declare function DrawGizmo(matrixPtr : number , id : string) : boolean;
declare function SetWaterQuadIsInvisible(waterQuad : number , isInvisible : boolean) : boolean;
declare function SetWaterQuadAlpha(waterQuad : number , a0 : number , a1 : number , a2 : number , a3 : number) : boolean;
declare function SetWetClothPinRadiusScale(scale : number) : void;
declare function ShutdownLoadingScreenNui() : void;
declare function SetWaterQuadLevel(waterQuad : number , level : number) : boolean;
declare function SetWeatherCycleEntry(index : number , typeName : string , timeMult : number) : boolean;
declare function SetWaterQuadNoStencil(waterQuad : number , noStencil : boolean) : boolean;
declare function SetWaveQuadDirection(waveQuad : number , directionX : number , directionY : number) : boolean;
declare function SetWaterQuadBounds(waterQuad : number , minX : number , minY : number , maxX : number , maxY : number) : boolean;
declare function GetMapdataEntityMatrix(mapDataHash : number , entityInternalIdx : number , matrixPtr : number) : boolean;
declare function GetEntityMapdataOwner(entity : number , mapdataHandle : number , entityHandle : number) : boolean;
declare function ResetMapdataEntityMatrix(mapDataHash : number , entityInternalIdx : number) : boolean;
declare function GetMapdataFromHashKey(mapdataHandle : number) : number;
declare function UnregisterRawNuiCallback(callbackType : string) : void;
declare function EnterCursorMode() : void;
declare function DisableEditorRuntime() : void;
declare function GetMapdataEntityHandle(mapDataHash : number , entityInternalIdx : number , entityHandle : number) : boolean;
declare function SetEntityDrawOutlineRenderTechnique(techniqueGroup : string) : void;
declare function SetEntityDrawOutlineColor(red : number , green : number , blue : number , alpha : number) : void;
declare function SetEntityDrawOutlineShader(shader : number) : void;
declare function SetEntityDrawOutline(entity : number , enabled : boolean) : void;
declare function GetExternalKvpString(resource : string , key : string) : string;
declare function SelectEntityAtCursor(hitFlags : number , precise : boolean) : number;
declare function ResetEntityDrawOutlineRenderTechnique() : void;
declare function SelectEntityAtPos(fracX : number , fracY : number , hitFlags : number , precise : boolean) : number;
declare function SetEntityMatrix(entity : number , forwardX : number , forwardY : number , forwardZ : number , rightX : number , rightY : number , rightZ : number , upX : number , upY : number , upZ : number , atX : number , atY : number , atZ : number) : void;
declare function UpdateMapdataEntity(mapdata : number , entity : number , entityDef : object) : void;
declare function LeaveCursorMode() : void;
declare function GetEntityIndexFromMapdata(mapdata : number , entity : number) : number;
declare function SetWeatherOwnedByNetwork(network : boolean) : void;
declare function GetExternalKvpFloat(resource : string , key : string) : number;
declare function GetExternalKvpInt(resource : string , key : string) : number;
declare function EnableEditorRuntime() : void;
declare function StartFindExternalKvp(resourceName : string , prefix : string) : number;
