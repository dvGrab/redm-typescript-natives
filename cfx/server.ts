declare function DeleteEntity(entity : number) : void;
declare function CanPlayerStartCommerceSession(playerSrc : string) : boolean;
declare function IsHeliTailBoomBreakable(heli : number) : boolean;
declare function EnableEnhancedHostSupport(enabled : boolean) : void;
declare function DoesPlayerOwnSkuExt(playerSrc : string , skuId : number) : boolean;
declare function DeleteTrain(entity : number) : void;
declare function DoesBoatSinkWhenWrecked(vehicle : number) : boolean;
declare function DoesPlayerOwnSku(playerSrc : string , skuId : number) : boolean;
declare function DoesPlayerExist(playerSrc : string) : boolean;
declare function GetAllVehicles() : object;
declare function GetAllObjects() : object;
declare function GetConsoleBuffer() : string;
declare function FlagServerAsPrivate(private_ : boolean) : void;
declare function DropPlayer(playerSrc : string , reason : string) : void;
declare function DoesEntityExist(entity : Object) : boolean;
declare function GetAirDragMultiplierForPlayersVehicle(playerSrc : string) : number;
declare function GetAllPeds() : object;
declare function GetEntityRotationVelocity(entity : number) : number[];
declare function GetEntityScript(entity : number) : string;
declare function GetEntityRoutingBucket(entity : number) : number;
declare function GetEntityOrphanMode(entity : number) : number;
declare function GetEntityAttachedTo(entity : number) : number;
declare function GetEntityMaxHealth(entity : number) : number;
declare function GetEntitySpeed(entity : number) : number;
declare function GetEntityType(entity : number) : number;
declare function GetEntityHeading(entity : number) : number;
declare function GetEntityPopulationType(entity : number) : number;
declare function GetEntityVelocity(entity : number) : number[];
declare function GetEntityCollisionDisabled(entity : number) : boolean;
declare function GetCurrentPedWeapon(ped : number) : number;
declare function GetEntityCoords(entity : number) : number[];
declare function GetHeliDisableExplodeFromBodyDamage(heli : number) : boolean;
declare function GetEntityHealth(entity : number) : number;
declare function GetEntityRotation(entity : number) : number[];
declare function GetHostId() : string;
declare function GetHeliThrottleControl(heli : number) : number;
declare function GetEntityModel(entity : number) : number;
declare function GetHeliMainRotorDamageScale(heli : number) : number;
declare function GetEntityRemoteSyncedScenesAllowed(entity : number) : boolean;
declare function GetGameTimer() : number;
declare function GetHeliPitchControl(heli : number) : number;
declare function GetHeliRollControl(heli : number) : number;
declare function GetHeliBodyHealth(heli : number) : number;
declare function GetHeliMainRotorHealth(vehicle : number) : number;
declare function GetHeliRearRotorDamageScale(heli : number) : number;
declare function GetHashKey(model : string) : number;
declare function GetNumPlayerIndices() : number;
declare function GetHeliGasTankHealth(heli : number) : number;
declare function GetHeliTailRotorHealth(vehicle : number) : number;
declare function GetNumPlayerIdentifiers(playerSrc : string) : number;
declare function GetIsVehicleSecondaryColourCustom(vehicle : number) : boolean;
declare function GetHeliYawControl(heli : number) : number;
declare function GetPedInVehicleSeat(vehicle : number , seatIndex : number) : number;
declare function GetHeliTailRotorDamageScale(heli : number) : number;
declare function GetNumPlayerTokens(playerSrc : string) : number;
declare function GetIsHeliEngineRunning(heli : number) : boolean;
declare function GetHeliEngineHealth(heli : number) : number;
declare function GetIsVehiclePrimaryColourCustom(vehicle : number) : boolean;
declare function GetHeliRearRotorHealth(vehicle : number) : number;
declare function GetIsVehicleEngineRunning(vehicle : number) : boolean;
declare function GetLandingGearState(vehicle : number) : number;
declare function GetPedCauseOfDeath(ped : number) : number;
declare function GetLastPedInVehicleSeat(vehicle : number , seatIndex : number) : number;
declare function GetPasswordHash(password : string) : string;
declare function GetNetTypeFromEntity(entity : number) : number;
declare function GetPlayerName(playerSrc : string) : string;
declare function GetPedDesiredHeading(ped : number) : number;
declare function GetPedSourceOfDamage(ped : number) : number;
declare function GetPedArmour(ped : number) : number;
declare function GetPedSpecificTaskType(ped : number , index : number) : number;
declare function GetPlayerMaxArmour(playerSrc : string) : number;
declare function GetPlayerFakeWantedLevel(playerSrc : string) : number;
declare function GetPedMaxHealth(ped : number) : number;
declare function GetPlayerFromIndex(index : number) : string;
declare function GetPlayerMaxHealth(playerSrc : string) : number;
declare function GetPlayerPed(playerSrc : string) : number;
declare function GetPlayerInvincible(playerSrc : string) : boolean;
declare function GetPlayerRoutingBucket(playerSrc : string) : number;
declare function GetPlayerCameraRotation(playerSrc : string) : number[];
declare function GetPlayerFocusPos(playerSrc : string) : number[];
declare function GetPlayerIdentifierByType(playerSrc : string , identifierType : string) : string;
declare function GetPedSourceOfDeath(ped : number) : number;
declare function GetPlayerPeerStatistics(playerSrc : string , peerStatistic : number) : number;
declare function GetPlayerEndpoint(playerSrc : string) : string;
declare function GetThrusterSideRcsThrottle(jetpack : number) : number;
declare function GetPlayerTeam(playerSrc : string) : number;
declare function GetPlayerWantedCentrePosition(playerSrc : string) : number[];
declare function GetPedScriptTaskCommand(ped : number) : number;
declare function GetPlayerGuid(playerSrc : string) : string;
declare function GetPlayerPing(playerSrc : string) : number;
declare function GetPlayerLastMsg(playerSrc : string) : number;
declare function GetPedStealthMovement(ped : number) : boolean;
declare function GetPlayerIdentifier(playerSrc : string , identiferIndex : number) : string;
declare function GetPedScriptTaskStage(ped : number) : number;
declare function GetVehicleBodyHealth(vehicle : number) : number;
declare function GetThrusterThrottle(jetpack : number) : number;
declare function GetResourcePath(resourceName : string) : string;
declare function GetPlayerWantedLevel(playerSrc : string) : number;
declare function GetPlayerTimeInPursuit(playerSrc : string , lastPursuit : boolean) : number;
declare function GetPlayerTimeOnline(playerSrc : string) : number;
declare function GetTrainCarriageIndex(train : number) : number;
declare function GetPedRelationshipGroupHash(ped : number) : number;
declare function GetPlayerToken(playerSrc : string , index : number) : string;
declare function GetTrainBackwardCarriage(train : number) : number;
declare function GetTrainForwardCarriage(train : number) : number;
declare function GetTrainCarriageEngine(train : number) : number;
declare function GetVehicleNeonEnabled(vehicle : number , neonIndex : number) : boolean;
declare function GetVehicleDoorLockStatus(vehicle : number) : number;
declare function GetVehicleColours(vehicle : number , colorPrimary : number , colorSecondary : number) : void;
declare function GetSelectedPedWeapon(ped : number) : number;
declare function GetVehicleDirtLevel(vehicle : number) : number;
declare function GetVehicleEngineHealth(vehicle : number) : number;
declare function GetVehiclePedIsIn(ped : number , lastVehicle : boolean) : number;
declare function GetVehicleDoorsLockedForPlayer(vehicle : number) : number;
declare function GetVehicleDashboardColour(vehicle : number , color : number) : void;
declare function GetVehicleTyreSmokeColor(vehicle : number , r : number , g : number , b : number) : void;
declare function GetVehicleCustomPrimaryColour(vehicle : number , r : number , g : number , b : number) : void;
declare function GetVehicleCustomSecondaryColour(vehicle : number , r : number , g : number , b : number) : void;
declare function GetVehicleNeonColour(vehicle : number , red : number , green : number , blue : number) : void;
declare function GetVehicleRoofLivery(vehicle : number) : number;
declare function GetVehicleHeadlightsColour(vehicle : number) : number;
declare function GetVehicleDoorStatus(vehicle : number , doorIndex : number) : number;
declare function GetVehicleLockOnTarget(vehicle : number) : number;
declare function GetVehicleNumberPlateTextIndex(vehicle : number) : number;
declare function GetVehicleHomingLockonState(vehicle : number) : number;
declare function GetVehicleNumberPlateText(vehicle : number) : string;
declare function GetVehicleFlightNozzlePosition(vehicle : number) : number;
declare function GetVehicleHornType(vehicle : number) : number;
declare function GetVehicleLivery(vehicle : number) : number;
declare function GetVehiclePetrolTankHealth(vehicle : number) : number;
declare function GetVehicleLightsState(vehicle : number , lightsOn : boolean , highbeamsOn : boolean) : boolean;
declare function GetVehicleWindowTint(vehicle : number) : number;
declare function GetVehicleInteriorColour(vehicle : number , color : number) : void;
declare function GetVehicleWheelType(vehicle : number) : number;
declare function GetVehicleRadioStationIndex(vehicle : number) : number;
declare function GetVehicleTotalRepairs(vehicle : number) : number;
declare function GetVehicleExtraColours(vehicle : number , pearlescentColor : number , wheelColor : number) : void;
declare function HasEntityBeenMarkedAsNoLongerNeeded(vehicle : number) : boolean;
declare function IsHeliTailBoomBroken(heli : number) : boolean;
declare function IsBoatAnchoredAndFrozen(vehicle : number) : boolean;
declare function IsBoatWrecked(vehicle : number) : boolean;
declare function IsPedHandcuffed(ped : number) : boolean;
declare function IsPedRagdoll(ped : number) : boolean;
declare function IsPlayerEvadingWantedLevel(playerSrc : string) : boolean;
declare function IsFlashLightOn(ped : number) : boolean;
declare function IsPedStrafing(ped : number) : boolean;
declare function HasVehicleBeenDamagedByBullets(vehicle : number) : boolean;
declare function IsPedUsingActionMode(ped : number) : boolean;
declare function IsEntityVisible(entity : number) : boolean;
declare function IsPedAPlayer(ped : number) : boolean;
declare function HasVehicleBeenOwnedByPlayer(vehicle : number) : boolean;
declare function IsPlayerAceAllowed(playerSrc : string , object : string) : boolean;
declare function IsVehicleExtraTurnedOn(vehicle : number , extraId : number) : boolean;
declare function IsTrainCaboose(train : number) : boolean;
declare function IsPlayerCommerceInfoLoaded(playerSrc : string) : boolean;
declare function LoadPlayerCommerceDataExt(playerSrc : string) : void;
declare function LoadPlayerCommerceData(playerSrc : string) : void;
declare function IsVehicleSirenOn(vehicle : number) : boolean;
declare function IsVehicleTyreBurst(vehicle : number , wheelID : number , completely : boolean) : boolean;
declare function IsPlayerUsingSuperJump(playerSrc : string) : boolean;
declare function IsVehicleWindowIntact(vehicle : number , windowIndex : number) : boolean;
declare function IsPlayerCommerceInfoLoadedExt(playerSrc : string) : boolean;
declare function NetworkGetEntityFromNetworkId(netId : number) : number;
declare function IsPlayerInFreeCamMode(playerSrc : string) : boolean;
declare function MumbleCreateChannel(id : number) : void;
declare function MumbleSetPlayerMuted(playerSrc : number , toggle : boolean) : void;
declare function RegisterConsoleListener(listener : Function) : void;
declare function MumbleIsPlayerMuted(playerSrc : number) : boolean;
declare function PerformHttpRequestInternalEx(requestData : object) : number;
declare function NetworkGetNetworkIdFromEntity(entity : number) : number;
declare function SaveResourceFile(resourceName : string , fileName : string , data : string , dataLength : number) : boolean;
declare function RegisterResourceAsset(resourceName : string , fileName : string) : string;
declare function NetworkGetFirstEntityOwner(entity : number) : number;
declare function PerformHttpRequestInternal(requestData : string , requestDataLength : number) : number;
declare function RequestPlayerCommerceSession(playerSrc : string , skuId : number) : void;
declare function RegisterResourceBuildTaskFactory(factoryId : string , factoryFn : Function) : void;
declare function NetworkGetVoiceProximityOverrideForPlayer(playerSrc : string) : number[];
declare function ScheduleResourceTick(resourceName : string) : void;
declare function SetEntityOrphanMode(entity : number , orphanMode : number) : void;
declare function SetEntityDistanceCullingRadius(entity : number , radius : number) : void;
declare function SetConvarReplicated(varName : string , value : string) : void;
declare function SetEntityIgnoreRequestControlFilter(entity : number , ignore : boolean) : void;
declare function SetConvar(varName : string , value : string) : void;
declare function SetGameType(gametypeName : string) : void;
declare function SetConvarServerInfo(varName : string , value : string) : void;
declare function SetEntityRemoteSyncedScenesAllowed(entity : number , allow : boolean) : void;
declare function SetEntityRoutingBucket(entity : number , bucket : number) : void;
declare function SetMapName(mapName : string) : void;
declare function SetHttpHandler(handler : Function) : void;
declare function SetPlayerCullingRadius(playerSrc : string , radius : number) : void;
declare function SetRoutingBucketEntityLockdownMode(bucketId : number , mode : string) : void;
declare function SetPlayerRoutingBucket(playerSrc : string , bucket : number) : void;
declare function SetRoutingBucketPopulationEnabled(bucketId : number , mode : boolean) : void;
declare function PrintStructuredTrace(jsonString : string) : void;
declare function StopResource(resourceName : string) : boolean;
declare function TempBanPlayer(playerSrc : string , reason : string) : void;
declare function TriggerClientEventInternal(eventName : string , eventTarget : string , eventPayload : string , payloadLength : number) : void;
declare function TriggerLatentClientEventInternal(eventName : string , eventTarget : string , eventPayload : string , payloadLength : number , bps : number) : void;
declare function CreateVehicleServerSetter(modelHash : number , type : string , x : number , y : number , z : number , heading : number) : number;
declare function FlushResourceKvp() : void;
declare function ClearPedProp(ped : number , propId : number) : void;
declare function StartResource(resourceName : string) : boolean;
declare function ClearPedSecondaryTask(ped : number) : void;
declare function ScanResourceRoot(rootPath : string , callback : Function) : void;
declare function CreatePedInsideVehicle(vehicle : number , pedType : number , modelHash : number , seat : number , isNetwork : boolean , bScriptHostPed : boolean) : number;
declare function VerifyPasswordHash(password : string , hash : string) : boolean;
declare function ClearPlayerWantedLevel(player : number) : void;
declare function SetEntityRotation(entity : number , pitch : number , roll : number , yaw : number , rotationOrder : number , bDeadCheck : boolean) : void;
declare function CreateObject(modelHash : number , x : number , y : number , z : number , isNetwork : boolean , netMissionEntity : boolean , doorFlag : boolean) : number;
declare function CreateObjectNoOffset(modelHash : number , x : number , y : number , z : number , isNetwork : boolean , netMissionEntity : boolean , doorFlag : boolean) : number;
declare function SetEntityVelocity(entity : number , x : number , y : number , z : number) : void;
declare function AddBlipForArea(x : number , y : number , z : number , width : number , height : number) : number;
declare function RemoveWeaponComponentFromPed(ped : number , weaponHash : number , componentHash : number) : void;
declare function AddPedDecorationFromHashes(ped : number , collection : number , overlay : number) : void;
declare function CreatePed(pedType : number , modelHash : number , x : number , y : number , z : number , heading : number , isNetwork : boolean , bScriptHostPed : boolean) : number;
declare function AddBlipForCoord(x : number , y : number , z : number) : number;
declare function SetCurrentPedWeapon(ped : number , weaponHash : number , bForceInHand : boolean) : void;
declare function AddBlipForRadius(posX : number , posY : number , posZ : number , radius : number) : number;
declare function SetPedPropIndex(ped : number , componentId : number , drawableId : number , textureId : number , attach : boolean) : void;
declare function SetPedCanRagdoll(ped : number , toggle : boolean) : void;
declare function AddBlipForEntity(entity : number) : number;
declare function SetEntityHeading(entity : number , heading : number) : void;
declare function SetPedHairTint(ped : number , colorID : number , highlightColorID : number) : void;
declare function FreezeEntityPosition(entity : number , toggle : boolean) : void;
declare function SetPedToRagdollWithFall(ped : number , minTime : number , maxTime : number , nFallType : number , dirX : number , dirY : number , dirZ : number , fGroundHeight : number , grab1X : number , grab1Y : number , grab1Z : number , grab2X : number , grab2Y : number , grab2Z : number) : void;
declare function SetVehicleColourCombination(vehicle : number , colorCombination : number) : void;
declare function CreateVehicle(modelHash : number , x : number , y : number , z : number , heading : number , isNetwork : boolean , netMissionEntity : boolean) : number;
declare function SetPedRandomComponentVariation(ped : number , p1 : number) : void;
declare function SetBlipSprite(blip : number , spriteId : number) : void;
declare function ClearPedTasksImmediately(ped : number) : void;
declare function GiveWeaponToPed(ped : number , weaponHash : number , ammoCount : number , isHidden : boolean , bForceInHand : boolean) : void;
declare function ApplyForceToEntity(entity : number , forceType : number , x : number , y : number , z : number , offX : number , offY : number , offZ : number , nComponent : number , bLocalForce : boolean , bLocalOffset : boolean , bScaleByMass : boolean , bPlayAudio : boolean , bScaleByTimeWarp : boolean) : void;
declare function ClearPedTasks(ped : number) : void;
declare function SetVehicleNumberPlateText(vehicle : number , plateText : string) : void;
declare function SetPedHeadBlendData(ped : number , shapeFirstID : number , shapeSecondID : number , shapeThirdID : number , skinFirstID : number , skinSecondID : number , skinThirdID : number , shapeMix : number , skinMix : number , thirdMix : number , isParent : boolean) : void;
declare function SetPedConfigFlag(ped : number , flagId : number , value : boolean) : void;
declare function SetVehicleCustomSecondaryColour(vehicle : number , r : number , g : number , b : number) : void;
declare function RemoveBlip(blip : number) : void;
declare function SetVehicleDoorBroken(vehicle : number , doorIndex : number , deleteDoor : boolean) : void;
declare function SetPedDefaultComponentVariation(ped : number) : void;
declare function SetVehicleColours(vehicle : number , colorPrimary : number , colorSecondary : number) : void;
declare function SetPedRandomProps(ped : number) : void;
declare function TaskGoStraightToCoord(ped : number , x : number , y : number , z : number , speed : number , timeout : number , targetHeading : number , distanceToSlide : number) : void;
declare function SetPedIntoVehicle(ped : number , vehicle : number , seatIndex : number) : void;
declare function SetPedResetFlag(ped : number , flagId : number , doReset : boolean) : void;
declare function RemoveAllPedWeapons(ped : number , p1 : boolean) : void;
declare function SetPedAmmo(ped : number , weaponHash : number , ammo : number) : void;
declare function GiveWeaponComponentToPed(ped : number , weaponHash : number , componentHash : number) : void;
declare function SetEntityCoords(entity : number , xPos : number , yPos : number , zPos : number , alive : boolean , deadFlag : boolean , ragdollFlag : boolean , clearArea : boolean) : void;
declare function TaskPlayAnimAdvanced(ped : number , animDictionary : string , animationName : string , posX : number , posY : number , posZ : number , rotX : number , rotY : number , rotZ : number , blendInSpeed : number , blendOutSpeed : number , duration : number , flag : any , animTime : number , p14 : any , p15 : any) : void;
declare function SetPedEyeColor(ped : number , index : number) : void;
declare function SetPlayerControl(player : number , bHasControl : boolean , flags : number) : void;
declare function SetVehicleBodyHealth(vehicle : number , value : number) : void;
declare function SetVehicleAlarm(vehicle : number , state : boolean) : void;
declare function RemoveWeaponFromPed(ped : number , weaponHash : number) : void;
declare function SetPedHeadOverlayColor(ped : number , overlayID : number , colorType : number , colorID : number , secondColorID : number) : void;
declare function SetPedFaceFeature(ped : number , index : number , scale : number) : void;
declare function TaskLeaveAnyVehicle(ped : number , p1 : number , flags : number) : void;
declare function SetPlayerInvincible(player : number , bInvincible : boolean) : void;
declare function SetPedHeadOverlay(ped : number , overlayID : number , index : number , opacity : number) : void;
declare function SetPedArmour(ped : number , amount : number) : void;
declare function SetPedToRagdoll(ped : number , minTime : number , maxTime : number , ragdollType : number , bAbortIfInjured : boolean , bAbortIfDead : boolean , bForceScriptControl : boolean) : void;
declare function TaskWarpPedIntoVehicle(ped : number , vehicle : number , seatIndex : number) : void;
declare function TaskGoToEntity(entity : number , target : number , duration : number , distance : number , speed : number , p5 : number , p6 : number) : void;
declare function SetPlayerWantedLevel(player : number , wantedLevel : number , delayedResponse : boolean) : void;
declare function TaskEnterVehicle(ped : number , vehicle : number , timeout : number , seatIndex : number , speed : number , flag : number , p6 : any) : void;
declare function SetVehicleDirtLevel(vehicle : number , dirtLevel : number) : void;
declare function SetPedComponentVariation(ped : number , componentId : number , drawableId : number , textureId : number , paletteId : number) : void;
declare function TaskCombatPed(ped : number , targetPed : number , p2 : number , p3 : number) : void;
declare function TaskDriveBy(driverPed : number , targetPed : number , targetVehicle : number , targetX : number , targetY : number , targetZ : number , distanceToShoot : number , pedAccuracy : number , p8 : boolean , firingPattern : number) : void;
declare function SetVehicleDoorsLocked(vehicle : number , doorLockStatus : number) : void;
declare function TaskGoToCoordAnyMeans(ped : number , x : number , y : number , z : number , fMoveBlendRatio : number , vehicle : number , bUseLongRangeVehiclePathing : boolean , drivingFlags : number , fMaxRangeToShootTargets : number) : void;
declare function SetVehicleCustomPrimaryColour(vehicle : number , r : number , g : number , b : number) : void;
declare function TaskEveryoneLeaveVehicle(vehicle : number) : void;
declare function SetPlayerModel(player : number , model : number) : void;
declare function TaskReactAndFleePed(ped : number , fleeTarget : number) : void;
declare function TaskLeaveVehicle(ped : number , vehicle : number , flags : number) : void;
declare function TaskShootAtEntity(entity : number , target : number , duration : number , firingPattern : number) : void;
declare function TaskPlayAnim(ped : number , animDictionary : string , animationName : string , blendInSpeed : number , blendOutSpeed : number , duration : number , flag : number , playbackRate : number , lockX : boolean , lockY : boolean , lockZ : boolean) : void;
declare function TaskShootAtCoord(ped : number , x : number , y : number , z : number , duration : number , firingPattern : number) : void;
declare function TaskHandsUp(ped : number , duration : number , facingPed : number , p3 : number , p4 : boolean) : void;
